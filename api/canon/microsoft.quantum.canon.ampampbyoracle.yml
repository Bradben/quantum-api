### YamlMime:QSharpType
uid: microsoft.quantum.canon.ampampbyoracle
name: AmpAmpByOracle
type: function
namespace: Microsoft.Quantum.Canon
summary: >2
   Standard Amplitude Amplification algorithm
remarks: " This is the standard amplitude amplification algorithm obtained by a choice of reflection phases computed by \"AmpAmpPhasesStandard\"\n Assuming that \n $$\n A\\ket{0}\\_{f}\\ket{0}\\_s= \\lambda\\ket{1}\\_f\\ket{\\text{target}}\\_s + \\sqrt{1-|\\lambda|^2}\\ket{0}\\_f\\cdots,\n $$\n this operation prepares the state \n $$\n \\operatorname{AmpAmpByOracle}\\ket{0}\\_{f}\\ket{0}\\_s= \\sin((2n+1)\\sin^{-1}(\\lambda))\\ket{1}\\_f\\ket{\\text{target}}\\_s + \\cdots\\ket{0}\\_f\n $$\n In most cases, \"flagQubit\" and \"ancillaRegister\" is initialized in the state $\\ket{0}_f\\ket{0}_a$.\n [G. Brassard, P. Hoyer, M. Mosca, A. Tapp, https://arxiv.org/abs/quant-ph/0005055]"
syntax: 'function AmpAmpByOracle (nIterations : Int, stateOracle : StateOracle, idxFlagQubit : Int) : (Qubit[] => () : Adjoint, Controlled)'
input:
  content: '(nIterations : Int, stateOracle : StateOracle, idxFlagQubit : Int)'
  types:
  - name: idxFlagQubit
    isPrimitive: true
  - name: nIterations
    isPrimitive: true
  - name: stateOracle
    uid: stateoracle
    content: stateoracle
output:
  content: '(Qubit[] => () : Adjoint, Controlled)'
  types:
  - isOperation: true
    types:
    - isPrimitive: true
      isArray: true
    - isPrimitive: true
