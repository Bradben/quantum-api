### YamlMime:QSharpType
uid: microsoft.quantum.canon.andladder
name: AndLadder
type: operation
namespace: Microsoft.Quantum.Canon
summary: >2-
   Applies a unitary given by the following map on computational basis vectors:
   |x₁,…,xₙ⟩|y₁,…,yₙ₋₁⟩ ↦ |x₁,…,xₙ⟩|y₁⊕(x₁∧x₂),…,yₙ₋₁⊕(x₁∧x₂∧…∧xₙ)⟩
remarks: >2-
   - Used as a part of @"Microsoft.Quantum.Canon.ApplyMultiControlledC"
     and  @"Microsoft.Quantum.Canon.ApplyMultiControlledCA".
   - For the explanation and circuit diagram see Figure 4.10, Section 4.3 in Nielsen & Chuang.
syntax: 'operation AndLadder (ccnot : CCNOTop, controls : Qubit[], targets : Qubit[]) : ()'
references: >2
   - [ *Michael A. Nielsen , Isaac L. Chuang*,
       Quantum Computation and Quantum Information ](http://doi.org/10.1017/CBO9780511976667)
input:
  content: '(ccnot : CCNOTop, controls : Qubit[], targets : Qubit[])'
  types:
  - name: ccnot
    summary: ' The CCNOT gate to use for the construction'
    uid: ccnotop
  - name: controls
    summary: >2-
       We use notation |x₁,…,xₙ⟩ for values of these qubit in computational basis.
       These qubits are left unchanged.
       The length of controls must be at least 2 and equal to one plus the length of targets .
    uid: Qubit
    isPrimitive: true
    isArray: true
  - name: targets
    summary: >2
       We use notation |x₁,…,xₙ⟩ for values of these qubit in computational basis.
       The length of targets must be at least 1 and equal to the length of controls minus one.
    uid: Qubit
    isPrimitive: true
    isArray: true
output:
  content: ()
  types:
  - uid: ()
    isPrimitive: true
functors:
- Adjoint
