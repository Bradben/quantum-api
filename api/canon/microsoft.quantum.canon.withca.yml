### YamlMime:QSharpType
uid: microsoft.quantum.canon.withca
name: WithCA
type: operation
namespace: Microsoft.Quantum.Canon
summary: " Given operations implementing operators $U$ and $V$, performs the\n operation $UVU^{\\dagger}$ on a target. That is, this operation\n conjugates $V$ with $U$. \n The modifier 'CA' indicates that the inner operation is controllable\n and adjointable.\n"
remarks: >2
   The outer operation is always assumed to be adjointable, but does not
   need to be controllable in order for the combined operation to be
   controllable.
syntax: "operation WithCA (outerOperation : ('T => () : Adjoint), innerOperation : ('T => () : Adjoint, Controlled), target : 'T) : ()"
input:
  content: "(outerOperation : ('T => () : Adjoint), innerOperation : ('T => () : Adjoint, Controlled), target : 'T)"
  types:
  - name: outerOperation
    summary: " The operation $U$ that should be used to conjugate $V$. Note that the \n outer operation $U$ needs to be adjointable, but does not\n need to be controllable."
    isOperation: true
    input:
      uid: "'T"
      isLocal: true
    output:
      uid: ()
      isPrimitive: true
    functors:
    - Adjoint
  - name: innerOperation
    summary: >2
       The operation $V$ being conjugated.
    isOperation: true
    input:
      uid: "'T"
      isLocal: true
    output:
      uid: ()
      isPrimitive: true
    functors: &o0
    - Adjoint
    - Controlled
  - name: target
    uid: "'T"
    isLocal: true
output:
  content: ()
  types:
  - uid: ()
    isPrimitive: true
seeAlso:
- microsoft.quantum.canon.with
functors: *o0
typeParameters:
- uid: "'T"
  summary: >2
     The target on which each of the inner and outer operations act.
