### YamlMime:QSharpType
uid: microsoft.quantum.canon.randomwalkphaseestimation
name: RandomWalkPhaseEstimation
type: operation
namespace: Microsoft.Quantum.Canon
summary: >2
   Performs iterative phase estimation using a random walk to approximate
   Bayesian inference on the classical measurement results from a given
   oracle and eigenstate.
remarks: >2
   <h3>Iterative Phase Estimation and Eigenstates</h3>
   In general, the input register `eigenstate` need not be an
   eigenstate $\ket{\phi}$ of $U$, but can be a superposition over
   eigenstates. Suppose that the input state is given by
   \begin{align}
       \ket{\psi} & = \sum\_{j} \alpha\_j \ket{\phi\_j},
   \end{align}
   where $\{\alpha\_j\}$ are complex coefficients such that
   $\sum\_j |\alpha\_j|^2 = 1$ and where $U\ket{\phi\_j} = \phi\_j\ket{\phi\_j}$.

   Then, performing iterative phase estimation will eventually converge
   to a single eigenstate, as described in the
   [development guide](xref:microsoft.quantum.libraries.characterization#iterative-phase-estimation-without-eigenstates).

   <h3>Experiment Design</h3>
   The measurement times $t$ and inversion angles $\theta$
   passed to `oracle` are chosen according to
   the *particle guess heuristic*,
   \begin{align}
       \theta \sim \Pr(\phi),\quad t \approx \frac{1}{\variance{\phi}}.
   \end{align}
   This heuristic is optimal for reducing the expected posterior variance
   in iterative phase estimation under the assumption of a normal prior.

   <h3>Optimality</h3>
   This operation approximates the optimal estimator for the phase
   $\phi$, as evaluated using the
   quadratic loss $L(\phi, \hat{\phi}) \mathrel{:=} (\phi - \hat{\phi})^2$.

   See [Bayesian Phase Estimation](xref:microsoft.quantum.libraries.characterization#bayesian-phase-estimation)
   for more details on the statistics of iterative phase estimation.
syntax: 'operation RandomWalkPhaseEstimation (initialMean : Double, initialStdDev : Double, nMeasurements : Int, maxMeasurements : Int, unwind : Int, oracle : ContinuousOracle, targetState : Qubit[]) : Double'
references: >2-
   - Ferrie *et al.* 2011 [doi:10/tfx](https://doi.org/10.1007/s11128-012-0407-6),
     [arXiv:1110.3067](https://arxiv.org/abs/1110.3067).
   - Wiebe *et al.* 2013 [doi:10/tf3](https://doi.org/10.1103/PhysRevLett.112.190501),
     [arXiv:1309.0876](https://arxiv.org/abs/1309.0876)
   - Wiebe and Granade 2018 *(in preparation)*.
input:
  content: '(initialMean : Double, initialStdDev : Double, nMeasurements : Int, maxMeasurements : Int, unwind : Int, oracle : ContinuousOracle, targetState : Qubit[])'
  types:
  - name: initialMean
    summary: ' Mean of the initial normal prior distribution over $\phi$.'
    uid: Double
    isPrimitive: true
  - name: initialStdDev
    summary: ' Standard deviation of the initial normal prior distribution over $\phi$.'
    uid: Double
    isPrimitive: true
  - name: nMeasurements
    summary: ' Number of measurements to be accepted into the final posterior estimate.'
    uid: Int
    isPrimitive: true
  - name: maxMeasurements
    summary: ' Total number of measurements than can be taken before the operation is considered to have failed.'
    uid: Int
    isPrimitive: true
  - name: unwind
    summary: >2
       Number of results to forget when consistency checks fail.
    uid: Int
    isPrimitive: true
  - name: oracle
    summary: >2-
       An operation representing a unitary $U$ such that $U(t)\ket{\phi} = e^{i t \phi}\ket{\phi}$
       for eigenstates $\ket{\phi}$ with unknown phase $\phi \in \mathbb{R}^+$.
    uid: microsoft.quantum.canon.continuousoracle
  - name: targetState
    summary: ' A register that $U$ acts on.'
    uid: Qubit
    isPrimitive: true
    isArray: true
output:
  content: Double
  types:
  - summary: >2
       The final estimate $\hat{\phi} \mathrel{:=} \expect[\phi]$ , where
       the expectation is over the posterior given all accepted data.
    uid: Double
    isPrimitive: true
