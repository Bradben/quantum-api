### YamlMime:TSPackage
uid: qsharp-lang
name: qsharp-lang
summary: ''
type: package
functions:
  - name: getCompiler()
    uid: qsharp-lang.getCompiler
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getCompiler(): ICompiler'
      return:
        description: ''
        type: <xref uid="qsharp-lang.ICompiler" />
  - name: getCompilerWorker()
    uid: qsharp-lang.getCompilerWorker
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getCompilerWorker(): ICompilerWorker'
      return:
        description: ''
        type: <xref uid="qsharp-lang.ICompilerWorker" />
  - name: getDebugService()
    uid: qsharp-lang.getDebugService
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getDebugService(): IDebugService'
      return:
        description: ''
        type: <xref uid="qsharp-lang.IDebugService" />
  - name: getDebugServiceWorker()
    uid: qsharp-lang.getDebugServiceWorker
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getDebugServiceWorker(): IDebugServiceWorker'
      return:
        description: ''
        type: <xref uid="qsharp-lang.IDebugServiceWorker" />
  - name: >-
      getLanguageService((uri: string) => Promise<null | string>, (uri: string)
      => Promise<[string, number][]>, (uri: string) => Promise<null | {
      manifestDirectory: string }>)
    uid: qsharp-lang.getLanguageService
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getLanguageService(readFile?: (uri: string) => Promise<null |
        string>, listDir?: (uri: string) => Promise<[string, number][]>,
        getManifest?: (uri: string) => Promise<null | { manifestDirectory:
        string }>): ILanguageService
      parameters:
        - id: readFile
          type: '(uri: string) =&gt; Promise&lt;null | string&gt;'
          description: ''
        - id: listDir
          type: '(uri: string) =&gt; Promise&lt;[string, number][]&gt;'
          description: ''
        - id: getManifest
          type: >-
            (uri: string) =&gt; Promise&lt;null | { manifestDirectory: string
            }&gt;
          description: ''
      return:
        description: ''
        type: <xref uid="qsharp-lang.ILanguageService" />
  - name: getLanguageServiceWorker()
    uid: qsharp-lang.getLanguageServiceWorker
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getLanguageServiceWorker(): ILanguageServiceWorker'
      return:
        description: ''
        type: <xref uid="qsharp-lang.ILanguageServiceWorker" />
  - name: getLibrarySourceContent(string)
    uid: qsharp-lang.getLibrarySourceContent
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getLibrarySourceContent(path: string): Promise<string |
        undefined>
      parameters:
        - id: path
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;string | undefined&gt;
  - name: >-
      getProjectLoader((path: string) => Promise<null | string>, (path: string)
      => Promise<[string, number][]>, (path: string) => Promise<null | {
      manifestDirectory: string }>)
    uid: qsharp-lang.getProjectLoader
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProjectLoader(readFile: (path: string) => Promise<null |
        string>, loadDirectory: (path: string) => Promise<[string, number][]>,
        getManifest: (path: string) => Promise<null | { manifestDirectory:
        string }>): ProjectLoader
      parameters:
        - id: readFile
          type: '(path: string) =&gt; Promise&lt;null | string&gt;'
          description: ''
        - id: loadDirectory
          type: '(path: string) =&gt; Promise&lt;[string, number][]&gt;'
          description: ''
        - id: getManifest
          type: >-
            (path: string) =&gt; Promise&lt;null | { manifestDirectory: string
            }&gt;
          description: ''
      return:
        description: ''
        type: ProjectLoader
  - name: loadWasmModule(string | ArrayBuffer)
    uid: qsharp-lang.loadWasmModule
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loadWasmModule(uriOrBuffer: string | ArrayBuffer):
        Promise<void>
      parameters:
        - id: uriOrBuffer
          type: string | ArrayBuffer
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: eventStringToMsg(string)
    uid: qsharp-lang.eventStringToMsg
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function eventStringToMsg(msg: string): EventMsg | null'
      parameters:
        - id: msg
          type: string
          description: ''
      return:
        description: ''
        type: EventMsg | null
  - name: onCompilerEvent(string, IQscEventTarget)
    uid: qsharp-lang.onCompilerEvent
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function onCompilerEvent(msg: string, eventTarget: IQscEventTarget)'
      parameters:
        - id: msg
          type: string
          description: ''
        - id: eventTarget
          type: <xref uid="qsharp-lang.IQscEventTarget" />
          description: ''
  - name: makeEvent<E>(E["type"], E["detail"])
    uid: qsharp-lang.makeEvent
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function makeEvent<E>(type: E["type"], detail: E["detail"]): E'
      parameters:
        - id: type
          type: E["type"]
          description: ''
        - id: detail
          type: E["detail"]
          description: ''
      return:
        description: ''
        type: E
  - name: messageHandler(MessageEvent<any>)
    uid: qsharp-lang.messageHandler
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function messageHandler(e: MessageEvent<any>)'
      parameters:
        - id: e
          type: MessageEvent&lt;any&gt;
          description: ''
  - name: >-
      createCompilerDispatcher((msg: ResponseMessage<ICompiler> |
      EventMessage<QscEventData>) => void, ICompiler)
    uid: qsharp-lang.createCompilerDispatcher
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createCompilerDispatcher(postMessage: (msg:
        ResponseMessage<ICompiler> | EventMessage<QscEventData>) => void,
        service: ICompiler): (req: RequestMessage<ICompiler>) => any
      parameters:
        - id: postMessage
          type: >-
            (msg: ResponseMessage&lt;ICompiler&gt; |
            EventMessage&lt;QscEventData&gt;) =&gt; void
          description: ''
        - id: service
          type: <xref uid="qsharp-lang.ICompiler" />
          description: ''
      return:
        description: ''
        type: '(req: RequestMessage&lt;ICompiler&gt;) =&gt; any'
  - name: 'createCompilerProxy((msg: RequestMessage<ICompiler>) => void, () => void)'
    uid: qsharp-lang.createCompilerProxy
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createCompilerProxy(postMessage: (msg:
        RequestMessage<ICompiler>) => void, terminator: () => void): ICompiler &
        IServiceProxy & { onMsgFromWorker: (msg: ResponseMessage<ICompiler> |
        EventMessage<QscEventData>) => void }
      parameters:
        - id: postMessage
          type: '(msg: RequestMessage&lt;ICompiler&gt;) =&gt; void'
          description: ''
        - id: terminator
          type: () =&gt; void
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="qsharp-lang.ICompiler" /> & IServiceProxy & {
          onMsgFromWorker: (msg: ResponseMessage&lt;ICompiler&gt; |
          EventMessage&lt;QscEventData&gt;) =&gt; void }
  - name: >-
      createDebugServiceDispatcher((msg: EventMessage<QscEventData> |
      ResponseMessage<IDebugService>) => void, IDebugService)
    uid: qsharp-lang.createDebugServiceDispatcher
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDebugServiceDispatcher(postMessage: (msg:
        EventMessage<QscEventData> | ResponseMessage<IDebugService>) => void,
        service: IDebugService): (req: RequestMessage<IDebugService>) => any
      parameters:
        - id: postMessage
          type: >-
            (msg: EventMessage&lt;QscEventData&gt; |
            ResponseMessage&lt;IDebugService&gt;) =&gt; void
          description: ''
        - id: service
          type: <xref uid="qsharp-lang.IDebugService" />
          description: ''
      return:
        description: ''
        type: '(req: RequestMessage&lt;IDebugService&gt;) =&gt; any'
  - name: >-
      createDebugServiceProxy((msg: RequestMessage<IDebugService>) => void, ()
      => void)
    uid: qsharp-lang.createDebugServiceProxy
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDebugServiceProxy(postMessage: (msg:
        RequestMessage<IDebugService>) => void, terminator: () => void):
        IDebugService & IServiceProxy & { onMsgFromWorker: (msg:
        EventMessage<QscEventData> | ResponseMessage<IDebugService>) => void }
      parameters:
        - id: postMessage
          type: '(msg: RequestMessage&lt;IDebugService&gt;) =&gt; void'
          description: ''
        - id: terminator
          type: () =&gt; void
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="qsharp-lang.IDebugService" /> & IServiceProxy & {
          onMsgFromWorker: (msg: EventMessage&lt;QscEventData&gt; |
          ResponseMessage&lt;IDebugService&gt;) =&gt; void }
  - name: getAllKatas()
    uid: qsharp-lang.getAllKatas
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAllKatas(): Promise<Kata[]>'
      return:
        description: ''
        type: Promise&lt;<xref uid="qsharp-lang.Kata" />[]&gt;
  - name: getExerciseSources(Exercise)
    uid: qsharp-lang.getExerciseSources
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getExerciseSources(exercise: Exercise): Promise<string[]>'
      parameters:
        - id: exercise
          type: <xref uid="qsharp-lang.Exercise" />
          description: ''
      return:
        description: ''
        type: Promise&lt;string[]&gt;
  - name: getKata(string)
    uid: qsharp-lang.getKata
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getKata(id: string): Promise<Kata>'
      parameters:
        - id: id
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="qsharp-lang.Kata" />&gt;
  - name: >-
      createLanguageServiceDispatcher((msg: ResponseMessage<ILanguageService> |
      EventMessage<LanguageServiceEvent>) => void, ILanguageService)
    uid: qsharp-lang.createLanguageServiceDispatcher
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createLanguageServiceDispatcher(postMessage: (msg:
        ResponseMessage<ILanguageService> | EventMessage<LanguageServiceEvent>)
        => void, service: ILanguageService): (req:
        RequestMessage<ILanguageService>) => any
      parameters:
        - id: postMessage
          type: >-
            (msg: ResponseMessage&lt;ILanguageService&gt; |
            EventMessage&lt;LanguageServiceEvent&gt;) =&gt; void
          description: ''
        - id: service
          type: <xref uid="qsharp-lang.ILanguageService" />
          description: ''
      return:
        description: ''
        type: '(req: RequestMessage&lt;ILanguageService&gt;) =&gt; any'
  - name: >-
      createLanguageServiceProxy((msg: RequestMessage<ILanguageService>) =>
      void, () => void)
    uid: qsharp-lang.createLanguageServiceProxy
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createLanguageServiceProxy(postMessage: (msg:
        RequestMessage<ILanguageService>) => void, terminator: () => void):
        ILanguageService & IServiceProxy & { onMsgFromWorker: (msg:
        ResponseMessage<ILanguageService> | EventMessage<LanguageServiceEvent>)
        => void }
      parameters:
        - id: postMessage
          type: '(msg: RequestMessage&lt;ILanguageService&gt;) =&gt; void'
          description: ''
        - id: terminator
          type: () =&gt; void
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="qsharp-lang.ILanguageService" /> & IServiceProxy & {
          onMsgFromWorker: (msg: ResponseMessage&lt;ILanguageService&gt; |
          EventMessage&lt;LanguageServiceEvent&gt;) =&gt; void }
  - name: CreateIntegerTicks(number, number)
    uid: qsharp-lang.CreateIntegerTicks
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function CreateIntegerTicks(min: number, max: number): Tick[]'
      parameters:
        - id: min
          type: number
          description: ''
        - id: max
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="qsharp-lang.Tick" />[]
  - name: CreateTimeTicks(number, number)
    uid: qsharp-lang.CreateTimeTicks
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function CreateTimeTicks(min: number, max: number): Tick[]'
      parameters:
        - id: min
          type: number
          description: ''
        - id: max
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="qsharp-lang.Tick" />[]
  - name: getMinMaxXYForItems(SeriesOfPoints)
    uid: qsharp-lang.getMinMaxXYForItems
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMinMaxXYForItems(data: SeriesOfPoints): [number, number,
        number, number]
      parameters:
        - id: data
          type: SeriesOfPoints
          description: ''
      return:
        description: ''
        type: '[number, number, number, number]'
  - name: getRanges(SeriesOfPoints, number)
    uid: qsharp-lang.getRanges
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRanges(data: SeriesOfPoints, rangeCoefficient: number): {
        rangeX: { max: number, min: number }, rangeY: { max: number, min: number
        } }
      parameters:
        - id: data
          type: SeriesOfPoints
          description: ''
        - id: rangeCoefficient
          type: number
          description: ''
      return:
        description: ''
        type: >-
          { rangeX: { max: number, min: number }, rangeY: { max: number, min:
          number } }
  - name: >-
      createDispatcher<TService, TServiceEventMsg>((msg:
      ResponseMessage<TService> | EventMessage<TServiceEventMsg>) => void,
      TService, MethodMap<TService>, TServiceEventMsg["type"][])
    uid: qsharp-lang.createDispatcher
    package: qsharp-lang
    summary: >-
      Function to wrap a service in a dispatcher. To be used in the worker
      thread.


      See createProxy.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDispatcher<TService, TServiceEventMsg>(postMessage: (msg:
        ResponseMessage<TService> | EventMessage<TServiceEventMsg>) => void,
        service: TService, methods: MethodMap<TService>, eventNames:
        TServiceEventMsg["type"][]): (req: RequestMessage<TService>) => any
      parameters:
        - id: postMessage
          type: >-
            (msg: ResponseMessage&lt;TService&gt; |
            EventMessage&lt;TServiceEventMsg&gt;) =&gt; void
          description: A function to post messages back to the main thread
        - id: service
          type: TService
          description: The service to be wrapped
        - id: methods
          type: <xref uid="qsharp-lang.MethodMap" />&lt;TService&gt;
          description: A map of method names. Should match the list passed into
        - id: eventNames
          type: TServiceEventMsg["type"][]
          description: The list of event names that the service can emit
      return:
        description: >-
          A function that takes a message and invokes the corresponding

          method on the service. The caller should then set this method as a
          message handler.
        type: '(req: RequestMessage&lt;TService&gt;) =&gt; any'
  - name: >-
      createProxy<TService, TServiceEventMsg>((msg: RequestMessage<TService>) =>
      void, () => void, MethodMap<TService>)
    uid: qsharp-lang.createProxy
    package: qsharp-lang
    summary: |-
      Function to create the proxy for a type. To be used from the main thread.

      See MethodMap
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createProxy<TService, TServiceEventMsg>(postMessage: (msg:
        RequestMessage<TService>) => void, terminator: () => void, methods:
        MethodMap<TService>): TService & IServiceProxy & { onMsgFromWorker:
        (msg: ResponseMessage<TService> | EventMessage<TServiceEventMsg>) =>
        void }
      parameters:
        - id: postMessage
          type: '(msg: RequestMessage&lt;TService&gt;) =&gt; void'
          description: A function to post messages to the worker
        - id: terminator
          type: () =&gt; void
          description: A function to call to tear down the worker thread
        - id: methods
          type: <xref uid="qsharp-lang.MethodMap" />&lt;TService&gt;
          description: A map of method names to be proxied and some metadata
      return:
        description: |-
          The proxy object. The caller should then set the onMsgFromWorker
          property to a callback that will receive messages from the worker.
        type: >-
          TService & <xref uid="qsharp-lang.IServiceProxy" /> & {
          onMsgFromWorker: (msg: ResponseMessage&lt;TService&gt; |
          EventMessage&lt;TServiceEventMsg&gt;) =&gt; void }
  - name: check_exercise_solution(string, any, Function)
    uid: qsharp-lang.check_exercise_solution
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function check_exercise_solution(solution_code: string,
        exercise_sources_js: any, event_cb: Function): boolean
      parameters:
        - id: solution_code
          type: string
          description: ''
        - id: exercise_sources_js
          type: any
          description: ''
        - id: event_cb
          type: Function
          description: ''
      return:
        description: ''
        type: boolean
  - name: default(InitInput | Promise<InitInput>)
    uid: qsharp-lang.default
    package: qsharp-lang
    summary: |-
      If `module_or_path` is {RequestInfo} or {URL}, makes a request and
      for everything else, calls `WebAssembly.instantiate` directly.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function default(module_or_path?: InitInput | Promise<InitInput>):
        Promise<InitOutput>
      parameters:
        - id: module_or_path
          type: >-
            <xref uid="qsharp-lang.InitInput" /> | Promise&lt;<xref
            uid="qsharp-lang.InitInput" />&gt;
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="qsharp-lang.InitOutput" />&gt;
  - name: get_estimates(any[][], string)
    uid: qsharp-lang.get_estimates
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function get_estimates(sources: any[][], params: string): string'
      parameters:
        - id: sources
          type: any[][]
          description: ''
        - id: params
          type: string
          description: ''
      return:
        description: ''
        type: string
  - name: get_hir(string)
    uid: qsharp-lang.get_hir
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function get_hir(code: string): string'
      parameters:
        - id: code
          type: string
          description: ''
      return:
        description: ''
        type: string
  - name: get_library_source_content(string)
    uid: qsharp-lang.get_library_source_content
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function get_library_source_content(name: string): string | undefined'
      parameters:
        - id: name
          type: string
          description: ''
      return:
        description: ''
        type: string | undefined
  - name: get_qir(any[][])
    uid: qsharp-lang.get_qir
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function get_qir(sources: any[][]): string'
      parameters:
        - id: sources
          type: any[][]
          description: ''
      return:
        description: ''
        type: string
  - name: git_hash()
    uid: qsharp-lang.git_hash
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function git_hash(): string'
      return:
        description: ''
        type: string
  - name: initLogging(any, number)
    uid: qsharp-lang.initLogging
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function initLogging(callback: any, level: number)'
      parameters:
        - id: callback
          type: any
          description: ''
        - id: level
          type: number
          description: ''
  - name: initSync(SyncInitInput)
    uid: qsharp-lang.initSync
    package: qsharp-lang
    summary: |-
      Instantiates the given `module`, which can either be bytes or
      a precompiled `WebAssembly.Module`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function initSync(module: SyncInitInput): InitOutput'
      parameters:
        - id: module
          type: <xref uid="qsharp-lang.SyncInitInput" />
          description: ''
      return:
        description: ''
        type: <xref uid="qsharp-lang.InitOutput" />
  - name: run(any[][], string, Function, number)
    uid: qsharp-lang.run
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function run(sources: any[][], expr: string, event_cb: Function, shots:
        number): boolean
      parameters:
        - id: sources
          type: any[][]
          description: ''
        - id: expr
          type: string
          description: ''
        - id: event_cb
          type: Function
          description: ''
        - id: shots
          type: number
          description: ''
      return:
        description: ''
        type: boolean
  - name: setLogLevel(number)
    uid: qsharp-lang.setLogLevel
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogLevel(level: number)'
      parameters:
        - id: level
          type: number
          description: ''
  - name: ColorMap(number)
    uid: qsharp-lang.ColorMap
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ColorMap(colorsCount: number): string[]'
      parameters:
        - id: colorsCount
          type: number
          description: ''
      return:
        description: ''
        type: string[]
  - name: CreateSingleEstimateResult(ReData, number)
    uid: qsharp-lang.CreateSingleEstimateResult
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function CreateSingleEstimateResult(input: ReData, frontierEntryIndex?:
        number): SingleEstimateResult
      parameters:
        - id: input
          type: <xref uid="qsharp-lang.ReData" />
          description: ''
        - id: frontierEntryIndex
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="qsharp-lang.SingleEstimateResult" />
  - name: CreateReport(SingleEstimateResult)
    uid: qsharp-lang.CreateReport
    package: qsharp-lang
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function CreateReport(result: SingleEstimateResult): ReportData'
      parameters:
        - id: result
          type: <xref uid="qsharp-lang.SingleEstimateResult" />
          description: ''
      return:
        description: ''
        type: ReportData
classes:
  - qsharp-lang.CancellationTokenSource
  - qsharp-lang.Compiler
  - qsharp-lang.QscEventTarget
  - qsharp-lang.QSharpDebugService
  - qsharp-lang.QSharpLanguageService
  - qsharp-lang.DebugService
  - qsharp-lang.LanguageService
  - qsharp-lang.ProjectLoader
interfaces:
  - qsharp-lang.CancellationToken
  - qsharp-lang.ICompiler
  - qsharp-lang.IDebugService
  - qsharp-lang.ILanguageService
  - qsharp-lang.IServiceEventTarget
  - qsharp-lang.IBreakpointSpan
  - qsharp-lang.IBreakpointSpanList
  - qsharp-lang.ICell
  - qsharp-lang.ICompletionItem
  - qsharp-lang.ICompletionList
  - qsharp-lang.IHover
  - qsharp-lang.ILocation
  - qsharp-lang.INotebookMetadata
  - qsharp-lang.IParameterInformation
  - qsharp-lang.IPosition
  - qsharp-lang.IQuantumState
  - qsharp-lang.IQuantumStateList
  - qsharp-lang.IRange
  - qsharp-lang.IRelatedInformation
  - qsharp-lang.ISignatureHelp
  - qsharp-lang.ISignatureInformation
  - qsharp-lang.IStackFrame
  - qsharp-lang.IStackFrameList
  - qsharp-lang.IStructStepResult
  - qsharp-lang.ITextEdit
  - qsharp-lang.IVariable
  - qsharp-lang.IVariableList
  - qsharp-lang.IWorkspaceConfiguration
  - qsharp-lang.IWorkspaceEdit
  - qsharp-lang.InitOutput
  - qsharp-lang.VSDiagnostic
typeAliases:
  - qsharp-lang.Dump
  - qsharp-lang.Result
  - qsharp-lang.ShotResult
  - qsharp-lang.CompilerState
  - qsharp-lang.ICompilerWorker
  - qsharp-lang.IQscEventTarget
  - qsharp-lang.QscEvent
  - qsharp-lang.QscEventData
  - qsharp-lang.QscEvents
  - qsharp-lang.IDebugServiceWorker
  - qsharp-lang.Answer
  - qsharp-lang.ContentItem
  - qsharp-lang.Example
  - qsharp-lang.Exercise
  - qsharp-lang.ExplainedSolution
  - qsharp-lang.ExplainedSolutionItem
  - qsharp-lang.Kata
  - qsharp-lang.KataSection
  - qsharp-lang.Lesson
  - qsharp-lang.LessonItem
  - qsharp-lang.Question
  - qsharp-lang.Solution
  - qsharp-lang.TextContent
  - qsharp-lang.ILanguageServiceWorker
  - qsharp-lang.LanguageServiceEvent
  - qsharp-lang.LogLevel
  - qsharp-lang.TelemetryCollector
  - qsharp-lang.TelemetryEvent
  - qsharp-lang.Tick
  - qsharp-lang.EventMessage
  - qsharp-lang.IServiceProxy
  - qsharp-lang.MethodMap
  - qsharp-lang.RequestMessage
  - qsharp-lang.ResponseMessage
  - qsharp-lang.ServiceState
  - qsharp-lang.InitInput
  - qsharp-lang.SyncInitInput
  - qsharp-lang.TargetProfile
  - qsharp-lang.FrontierEntry
  - qsharp-lang.ReData
  - qsharp-lang.SingleEstimateResult
enums:
  - qsharp-lang.StepResultId
